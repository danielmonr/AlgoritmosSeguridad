<resources>
    <string name="app_name">AlgoritmosSeguridad</string>

    <string name="hello_world">Hello world!</string>
    <string name="Anterior">&lt;</string>
    <string name="Siguiente">&gt;</string>
    <string name="MD5_ejemplo">Daniel</string>
    <string name="action_settings">Settings</string>
    <string name="title_activity_polybios">Polybios</string>
    <string name="title_activity_triple_des">TripleDES</string>
    <string name="title_activity_md5">MD5</string>
    <string name="MD5_explicacion_1">MD5 es un algoritmo criptográfico de reducción. Su longitud es de 128 bits representados en numeros hexadecimales.
    MD5 fue un algoritmo muy usado a principios de los 90s. Hoy en día se le han encontrado muchas vulnerabilidades y se prefiere usar SHA2.\n\n
    Arriba tenemos un texto a convertir en su hash MD5. Pulse Siguiente para ver una explicacion o Generar para ver el resultado final.</string>
    <string name="MD5_explicacion_2">El primer paso es obtener un string de b bits. A este se le agregara un bit con valor 1, seguido de una cantidad N de bits 0. Siendo b + 1 + N igual a 448 modulo 512\n
    Al resultado se le agregara un entero de 64 bits representando b.\n De esta forma obtenemos un a cantidad de bits multiplo de 512.</string>
    <string name="MD5_explicacion_3">El siguiente paso es inizializar el buffer llamado MD:
    palabra A: 0x67452301\n
    palabra B: 0xefcdab89\n
    palabra C: 0x98badcfe\n
    palabra D: 0x10325476\n\n
        Cada palabra tiene un longitud de 32 bits, generando un total de 128 bits.
    </string>
    <string name="MD5_explicacion_4">MD5 Utiliza 4 funciones, que se utlizaran en 4 rondas respectivamente.\n
    F(X,Y,Z) = (XnY)u(¬XnZ)\n
    G(X,Y,Z) = (XnZ)u(Yn¬Z)\n
    H(X,Y,Z) = X ^ Y ^ Z\n
    I(X,Y,Z) = Y ^ (Xu¬Z)\n
    \nDónde n: AND, u: OR, ¬: NOT, ^: XOR\n
    Se genera Una tabla T de 64 elementos, dónde el iesimo elemento es: T[i] = abs(sen(i)* 2^32</string>
    <string name="MD5_explicacion_5">La cadena que obtuvimos en el primer paso se divide en bloques de 16 palabras, y se guardan en un arreglo X.\n
    Por cada bloque de 512 bits se hace n las siguientes operaciones:\n
        Donde [abcd k s i] Representa a = b + ((a + Funcion(b, c, d) + X[k] + T[i]) &lt;&lt;&lt; s)\n donde Funcion es F,G,H o I dependiendo de la ronda y &lt;&lt;&lt; es una rotacion a la izquierda.
    Ronda1:\n[ABCD 0 7 1] [DABC  1 12  2] [CDAB  2 17  3] [BCDA  3 22  4]\n[ABCD  4  7  5] [DABC  5 12  6] [CDAB  6 17  7] [BCDA  7 22  8]\n[ABCD  8  7  9] [DABC  9 12 10] [CDAB 10 17 11] [BCDA 11 22 12]\n[ABCD 12  7 13] [DABC 13 12 14] [CDAB 14 17 15] [BCDA 15 22 16]\n \n
        Ronda2:\n [ABCD  1  5 17] [DABC  6  9 18] [CDAB 11 14 19] [BCDA  0 20 20]\n[ABCD  5  5 21] [DABC 10  9 22] [CDAB 15 14 23] [BCDA  4 20 24]\n[ABCD  9  5 25] [DABC 14  9 26] [CDAB  3 14 27] [BCDA  8 20 28]\n[ABCD 13  5 29] [DABC  2  9 30] [CDAB  7 14 31] [BCDA 12 20 32]\n \n
        Ronda3:\n [ABCD  5  4 33] [DABC  8 11 34] [CDAB 11 16 35] [BCDA 14 23 36]\n[ABCD  1  4 37] [DABC  4 11 38] [CDAB  7 16 39] [BCDA 10 23 40]\n[ABCD 13  4 41] [DABC  0 11 42] [CDAB  3 16 43] [BCDA  6 23 44]\n[ABCD  9  4 45] [DABC 12 11 46] [CDAB 15 16 47] [BCDA  2 23 48]\n \n
        Ronda4:\n [ABCD  0  6 49] [DABC  7 10 50] [CDAB 14 15 51] [BCDA  5 21 52]\n[ABCD 12  6 53] [DABC  3 10 54] [CDAB 10 15 55] [BCDA  1 21 56]\n[ABCD  8  6 57] [DABC 15 10 58] [CDAB  6 15 59] [BCDA 13 21 60]\n[ABCD  4  6 61] [DABC 11 10 62] [CDAB  2 15 63] [BCDA  9 21 64]\n \n
        Finalmente se suman los valores originales de A,B,C y D con sus nuevos valores.
    </string>
    <string name="Polybios_explicacion_1">Polybios es un cifrado por sustitución, de tipo simétrico.\n
    En este caso la llave consiste de una tabla con los caractéres disponibles en la entrada, y los índices los caractéres utilizados para la salida.</string>
    <string name="Polybios_explicacion_2">El cifrado consiste en localizar el caracter en la tabla y sustituirlo por la concatenación de sus índices.\n
        Esto hace que la cadena de salida tenga una longitud igual al doble del de la entrada.</string>
    <string name="TripDES_explicacion_1">El algoritmo 3DES es un tipo de cifrado por bloques. Es decir que la cadena de entrada se dividirá en bloques y el algoritmo se aplicará a cada bloque.\n
    3DES es una variación de DES que se creó cuando este fue roto, y consiste en aplicar 3 operaciones DES.\n
    1° Cifrado con una llave k1\n
    2° Descifrado con una llave k2\n
    3° Cifrado con una llave k3</string>
    <string name="TripDES_explicacion_2">El cifrado DES utiliza llaves de 64 bits, aunque solo utiliza 56 de sus bits\n
    El primer paso es la generación de las llaves:\n
    La llave proporcionada se permuta con la ayuda de una tabla predefinida. (es decir que se ordenan los bits de acuerdo a un orden).\n
    Esta llave se divide en dos generando dos bloques de 28 bits.\n
    Estos nos ayudan a formar 16 llaves respectivamente, haciendoles una rotación a la izquierda de n elementos. n nos es dada en una tabla, de acuerdo a la iteración.</string>
    <string name="TripDES_explicacion_3">Se juntan las llaves generadas por el bloque izquierdo con las del bloque derecho (C1D1, C2D2,...), y se ueden obtener las llaves finales haciendo las permutaciones dadas por una segunda tabla.\n
    De esta forma obtenemos 16 subllaves de 48 bits cada una.</string>
    <string name="TripDES_explicacion_4">En cuanto al mensaje en si, se le aplica una permutación inicial de acuerdo a la taba IP, a cada bloque de 64 bits.\n
    Ese nuevo bloque se dividido en dos mitades de 32 bits cada uno L0 y R0\nuna vez dividido se procede a realizar 16 iteraciones de las siguientes operaciones:\n
    Ln = R(n-1), Rn = L(n-1) XOR f(R(n-1)K1)\n
    Siendo n inicial = 1; F una función definida que explicaremos a continuación.</string>
    <string name="TripDES_explicacion_5">La función F:\n
    F recibe dos parametros un bloque B de 32 bits, y una llave de 48 bits.\n
    El primer paso es expandir B a 48 bits con una tabla de selección que repite algunos de los bits.\n
    Después se le aplica un XOR al resultado con la llave.\n
    De esta forma obtenemos una cadena de 48 bits, o 8 direcciones de 6 bits, que utilizamos para localizar bloques de 4 bits en Tablas llamadas Sboxes (8 SBs)\n
    S1(B1)S2(B2)S3(B3)S4(B4)S5(B5)S6(B6)S7(B7)S8(B8)\n
    El resultado es una cadena de 32 bits.\n
    Las direcciones funcionan de la siguiente forma:\n
    El primer y último bit se juntan y forman un numero i : 0&lt;= i &lt; 4,\n
    i representa la fila\n
    Los cutro bits de en medio genran j: 0&lt;= j &lt; 16\n
    j reprensenta la columna.\n
    Finalmente al resultado se le aplica una permutacion P de acuerdo a una tabla predefinida y se obtiene la cadena final de F ,de 32 bits.</string>
    <string name="TripDES_explicacion_6">Una vez hechas las 16 operaciones se concatenan R16L16 y se les aplica una última permutación IP-1.\n
    Para desencriptar siga los pasos anteriores a la inversa, aplicando las subllaves al revés.</string>
</resources>
