<resources>
    <string name="app_name">AlgoritmosCifrado</string>

    <string name="hello_world">Hello world!</string>
    <string name="Anterior">&lt;</string>
    <string name="Siguiente">&gt;</string>
    <string name="MD5_ejemplo">Daniel</string>
    <string name="action_settings">Settings</string>
    <string name="title_activity_polybios">Polybios</string>
    <string name="title_activity_triple_des">TripleDES</string>
    <string name="title_activity_md5">MD5</string>
    <string name="MD5_explicacion_1">MD5 es un algoritmo criptográfico de reducción. Su longitud es de 128 bits representados en numeros hexadecimales.
    MD5 fue un algoritmo muy usado a principios de los 90s. Hoy en día se le han encontrado muchas vulnerabilidades y se prefiere usar SHA2.\n\n
    Arriba tenemos un texto a convertir en su hash MD5. Pulse Siguiente para ver una explicacion o Generar para ver el resultado final.</string>
    <string name="MD5_explicacion_2">El primer paso es obtener un string de b bits. A este se le agregara un bit con valor 1, seguido de una cantidad N de bits 0. Siendo b + 1 + N igual a 448 modulo 512\n
    Al resultado se le agregara un entero de 64 bits representando b.\n De esta forma obtenemos un a cantidad de bits multiplo de 512.</string>
    <string name="MD5_explicacion_3">El siguiente paso es inizializar el buffer llamado MD:
    palabra A: 0x67452301\n
    palabra B: 0xefcdab89\n
    palabra C: 0x98badcfe\n
    palabra D: 0x10325476\n\n
        Cada palabra tiene un longitud de 32 bits, generando un total de 128 bits.
    </string>
    <string name="MD5_explicacion_4">MD5 Utiliza 4 funciones, que se utlizaran en 4 rondas respectivamente.\n
    F(X,Y,Z) = (XnY)u(¬XnZ)\n
    G(X,Y,Z) = (XnZ)u(Yn¬Z)\n
    H(X,Y,Z) = X ^ Y ^ Z\n
    I(X,Y,Z) = Y ^ (Xu¬Z)\n
    \nDónde n: AND, u: OR, ¬: NOT, ^: XOR\n
    Se genera Una tabla T de 64 elementos, dónde el iesimo elemento es: T[i] = abs(sen(i)* 2^32</string>
    <string name="MD5_explicacion_5">La cadena que obtuvimos en el primer paso se divide en bloques de 16 palabras, y se guardan en un arreglo X.\n
    Por cada bloque de 512 bits se hace n las siguientes operaciones:\n
        Donde [abcd k s i] Representa a = b + ((a + Funcion(b, c, d) + X[k] + T[i]) &lt;&lt;&lt; s)\n donde Funcion es F,G,H o I dependiendo de la ronda y &lt;&lt;&lt; es una rotacion a la izquierda.
    Ronda1:\n[ABCD 0 7 1] [DABC  1 12  2] [CDAB  2 17  3] [BCDA  3 22  4]\n[ABCD  4  7  5] [DABC  5 12  6] [CDAB  6 17  7] [BCDA  7 22  8]\n[ABCD  8  7  9] [DABC  9 12 10] [CDAB 10 17 11] [BCDA 11 22 12]\n[ABCD 12  7 13] [DABC 13 12 14] [CDAB 14 17 15] [BCDA 15 22 16]\n \n
        Ronda2:\n [ABCD  1  5 17] [DABC  6  9 18] [CDAB 11 14 19] [BCDA  0 20 20]\n[ABCD  5  5 21] [DABC 10  9 22] [CDAB 15 14 23] [BCDA  4 20 24]\n[ABCD  9  5 25] [DABC 14  9 26] [CDAB  3 14 27] [BCDA  8 20 28]\n[ABCD 13  5 29] [DABC  2  9 30] [CDAB  7 14 31] [BCDA 12 20 32]\n \n
        Ronda3:\n [ABCD  5  4 33] [DABC  8 11 34] [CDAB 11 16 35] [BCDA 14 23 36]\n[ABCD  1  4 37] [DABC  4 11 38] [CDAB  7 16 39] [BCDA 10 23 40]\n[ABCD 13  4 41] [DABC  0 11 42] [CDAB  3 16 43] [BCDA  6 23 44]\n[ABCD  9  4 45] [DABC 12 11 46] [CDAB 15 16 47] [BCDA  2 23 48]\n \n
        Ronda4:\n [ABCD  0  6 49] [DABC  7 10 50] [CDAB 14 15 51] [BCDA  5 21 52]\n[ABCD 12  6 53] [DABC  3 10 54] [CDAB 10 15 55] [BCDA  1 21 56]\n[ABCD  8  6 57] [DABC 15 10 58] [CDAB  6 15 59] [BCDA 13 21 60]\n[ABCD  4  6 61] [DABC 11 10 62] [CDAB  2 15 63] [BCDA  9 21 64]\n \n
        Finalmente se suman los valores originales de A,B,C y D con sus nuevos valores.
    </string>
    <string name="Polybios_explicacion_1">Polybios es un cifrado por sustitución, de tipo simétrico.\n
    En este caso la llave consiste de una tabla con los caractéres disponibles en la entrada, y los índices los caractéres utilizados para la salida.</string>
    <string name="Polybios_explicacion_2">El cifrado consiste en localizar el caracter en la tabla y sustituirlo por la concatenación de sus índices.\n
        Esto hace que la cadena de salida tenga una longitud igual al doble del de la entrada.</string>
    <string name="TripDES_explicacion_1">El algoritmo 3DES es un tipo de cifrado por bloques. Es decir que la cadena de entrada se dividirá en bloques y el algoritmo se aplicará a cada bloque.\n
    3DES es una variación de DES que se creó cuando este fue roto, y consiste en aplicar 3 operaciones DES.\n
    1° Cifrado con una llave k1\n
    2° Descifrado con una llave k2\n
    3° Cifrado con una llave k3</string>
    <string name="TripDES_explicacion_2">El cifrado DES utiliza llaves de 64 bits, aunque solo utiliza 56 de sus bits\n
    El primer paso es la generación de las llaves:\n
    La llave proporcionada se permuta con la ayuda de una tabla predefinida. (es decir que se ordenan los bits de acuerdo a un orden).\n
    Esta llave se divide en dos generando dos bloques de 28 bits.\n
    Estos nos ayudan a formar 16 llaves respectivamente, haciendoles una rotación a la izquierda de n elementos. n nos es dada en una tabla, de acuerdo a la iteración.</string>
    <string name="TripDES_explicacion_3">Se juntan las llaves generadas por el bloque izquierdo con las del bloque derecho (C1D1, C2D2,...), y se ueden obtener las llaves finales haciendo las permutaciones dadas por una segunda tabla.\n
    De esta forma obtenemos 16 subllaves de 48 bits cada una.</string>
    <string name="TripDES_explicacion_4">En cuanto al mensaje en si, se le aplica una permutación inicial de acuerdo a la taba IP, a cada bloque de 64 bits.\n
    Ese nuevo bloque se dividido en dos mitades de 32 bits cada uno L0 y R0\nuna vez dividido se procede a realizar 16 iteraciones de las siguientes operaciones:\n
    Ln = R(n-1), Rn = L(n-1) XOR f(R(n-1)K1)\n
    Siendo n inicial = 1; F una función definida que explicaremos a continuación.</string>
    <string name="TripDES_explicacion_5">La función F:\n
    F recibe dos parametros un bloque B de 32 bits, y una llave de 48 bits.\n
    El primer paso es expandir B a 48 bits con una tabla de selección que repite algunos de los bits.\n
    Después se le aplica un XOR al resultado con la llave.\n
    De esta forma obtenemos una cadena de 48 bits, o 8 direcciones de 6 bits, que utilizamos para localizar bloques de 4 bits en Tablas llamadas Sboxes (8 SBs)\n
    S1(B1)S2(B2)S3(B3)S4(B4)S5(B5)S6(B6)S7(B7)S8(B8)\n
    El resultado es una cadena de 32 bits.\n
    Las direcciones funcionan de la siguiente forma:\n
    El primer y último bit se juntan y forman un numero i : 0&lt;= i &lt; 4,\n
    i representa la fila\n
    Los cutro bits de en medio genran j: 0&lt;= j &lt; 16\n
    j reprensenta la columna.\n
    Finalmente al resultado se le aplica una permutacion P de acuerdo a una tabla predefinida y se obtiene la cadena final de F ,de 32 bits.</string>
    <string name="TripDES_explicacion_6">Una vez hechas las 16 operaciones se concatenan R16L16 y se les aplica una última permutación IP-1.\n
    Para desencriptar siga los pasos anteriores a la inversa, aplicando las subllaves al revés.</string>
    <string name="title_activity_sh">SHA</string>
    <string name="title_activity_rs">RSA</string>

    <string name="RSA_explicacion_1">
    RSA (Rivest, Shamir y Adleman) es un sistema criptográfico de clave pública desarrollado en 1977. Es el primer y más utilizado
    algoritmo de este tipo y es válido tanto para cifrar como para firmar digitalmente.
    La seguridad de este algoritmo radica en el problema de la factorización de números enteros. Los mensajes enviados se representan mediante números,
    y el funcionamiento se basa en el producto. Actualmente estos primos son del orden de 10^{200}, y se prevé que su tamaño crezca con el aumento de
    la capacidad de cálculo de los ordenadores.
</string>
<string name="RSA_explicacion_2">
    Para empezar cada usuario elige dos números primos distintos p y q.estos números deben escogerse de forma aleatoria y deben tener una longitud en bits parecida.
    Mientras mas grande sean los numeros mas seguro va a ser.
</string>
<string name="RSA_explicacion_3">
    Se calculan los valores de n y phi.
    n=p*q
    phi=(p-1)(q-1)
</string>
<string name="RSA_explicacion_4">
    Se escoge un entero positivo e\  menor que \varphi (n), que sea coprimo con \varphi (n).
    Se calcula d mediante aritmetica modular, que es el multiplicador modular inverso de e mod varphi(n)\
</string>
<string name="RSA_explicacion_5">
    Si Bob quiere mandarle un mensaja a Alicia:
    Alicia comunica su clave pública (n,e) a Bob y guarda la clave privada en secreto.
    Primero, Bob convierte M en un número entero m menor que n mediante un protocolo reversible acordado de antemano. Luego calcula el texto cifrado c mediante la operación
    c = m^e mod(n).
    Ahora Bob transmite c\  a Alicia.
    Alicia para descifrar el mensaje de Bob usa su clave privada (d) mediante la operacion m = c^d mod(n).
</string>
<string name="SHA_explicacion_1">
    La función de compresión de SHA-512 funciona con un bloque de mensaje de 1024 bits y un valor hash intermedio de 512 bits.
    Se trata esencialmente de un algoritmo de cifrado de bloques de 512 bits que cifra el valor de hash intermedia utilizando el bloque de mensaje como clave.
    El resultado es una cadena hash de longitud de 512 bits.
</string>
<string name="SHA_explicacion_2">
    El valor inicial de hash H es la siguiente secuencia de palabras de 64 bits (que son obtenido mediante la adopción de las partes fraccionarias de las raíces cuadradas de los primeros ocho números primos):H(0)
    H1 = 6a09e667f3bcc908\n
    H2 = bb67ae8584caa73b\n
    H3 = 3c6ef372fe94f82b\n
    H4 = a54ff53a5f1d36f1\n
    H5 = 510e527fade682d1\n
    H6 = 9b05688c2b3e6c1f\n
    H7 = 1f83d9abfb41bd6b\n
    H8 = 5be0cd19137e2179\n
</string>
<string name="SHA_explicacion_3">
    Se inicializa una secuencia k0 ... k79:\n
    k = 428a2f98d728ae22 7137449123ef65cd b5c0fbcfec4d3b2f e9b5dba58189dbbc....\n
    Estos valores corresponden a los sesenta y cuatro bits de las partes fraccionarias de las raíces cúbicas de los ochenta números primos.
</string>
<string name="SHA_explicacion_4">
    Preprocesamiento\n
    Primero agarramos el mensaje y lo pasamos a bits (l). Luego agregamos un 1 seguido de k 0s tal que (l+1+k)=896 mod 1024\n
    Luego de esto en los siguientes 128 bits agregamos la longitud del mensaje original. Ejemplo.\n
    La cadena abc en bits (01100001 01100010 01100011).\n
    Se agrega un 1 seguido en este caso por 871 0s para que se cumpla la condicion (l+1+k).\n
    En los siguentes 128 bits se agrega la longitud de abc = 8 * 3 = 24 (00...0011000).\n
    01100001 01100010 01100011 1 000...000011000
</string>
<string name="SHA_explicacion_5">
    Se divide el mensaje de 1024 bits en 16 pequeños bloques de 64 bits(M1, M2, ... M16)\n
    Por cada uno de los 16 bloques:\n
        \tw[80]\n
        \ta = H1, b = H2, c = H3, d = H4, e = H5, f = H6, g  = H7, h = H8\n
        \tCh(x; y; z)=(x AND y)^(¬x AND z)\n
        \tMaj(x; y; z)=(x AND y)^(x AND z)^(y AND z)\n
        \tSum0(x) = S(x,28)^S(x,34)^S(x,39)\n
        \tSum1(x) = S(x,14)^S(x,18)^S(x,41)\n
        \tSigma0(x) = S(x,1)^S(x,8)^R(x,7)\n
        \tSigma1(x) = S(x,19)^S(x,61)^R(x,6)\n
        \tWj = Mj for j = 0 to 15\n\n
        \tDónde AND:AND, ¬: NOT, ^: XOR, S:Right Rotate, R:Right Shift Rotate\n\n
        \tFor j = 16 to 79\n
            \t\tWj =Sigma1(W(j-2))+ W(j-7)+Sigma0(W(j-15))+W(j-16)\n
        \tFor j = 0 to 79\n
            \t\tT1 = h + Sum1(e) + Ch(e; f ; g) + Kj + Wj\n
            \t\tT2 =Sum0(a) + Maj(a; b; c)\n
            \t\th = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2\n
        \tH0 += a; H1 += b; H2 += c; H3 += d; H4 += e; H5 += f; H6 += g; H7 += h;\n
</string>
<string name="SHA_explicacion_6">
</string>

</resources>
